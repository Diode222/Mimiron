// Code generated by protoc-gen-go. DO NOT EDIT.
// source: SplittedMessage.proto

package proto_gen

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WordAndPos struct {
	Word                 *string       `protobuf:"bytes,1,req,name=word" json:"word,omitempty"`
	Pos                  *PartOfSpeech `protobuf:"bytes,2,req,name=pos" json:"pos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *WordAndPos) Reset()         { *m = WordAndPos{} }
func (m *WordAndPos) String() string { return proto.CompactTextString(m) }
func (*WordAndPos) ProtoMessage()    {}
func (*WordAndPos) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a5d74133ac2d80, []int{0}
}

func (m *WordAndPos) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WordAndPos.Unmarshal(m, b)
}
func (m *WordAndPos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WordAndPos.Marshal(b, m, deterministic)
}
func (m *WordAndPos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WordAndPos.Merge(m, src)
}
func (m *WordAndPos) XXX_Size() int {
	return xxx_messageInfo_WordAndPos.Size(m)
}
func (m *WordAndPos) XXX_DiscardUnknown() {
	xxx_messageInfo_WordAndPos.DiscardUnknown(m)
}

var xxx_messageInfo_WordAndPos proto.InternalMessageInfo

func (m *WordAndPos) GetWord() string {
	if m != nil && m.Word != nil {
		return *m.Word
	}
	return ""
}

func (m *WordAndPos) GetPos() *PartOfSpeech {
	if m != nil {
		return m.Pos
	}
	return nil
}

// 每个聊天消息只有一个句子，这个句子被分词后会重新组装成一个SplittedMessage，其中wordAndPosList表示句子分词得到的词语和词性信息切片
type SplittedMessage struct {
	WordAndPosList       []*WordAndPos `protobuf:"bytes,1,rep,name=wordAndPosList" json:"wordAndPosList,omitempty"`
	Time                 *int64        `protobuf:"varint,2,req,name=time" json:"time,omitempty"`
	ChatPerson           *string       `protobuf:"bytes,3,req,name=chatPerson" json:"chatPerson,omitempty"`
	Message              *string       `protobuf:"bytes,4,req,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SplittedMessage) Reset()         { *m = SplittedMessage{} }
func (m *SplittedMessage) String() string { return proto.CompactTextString(m) }
func (*SplittedMessage) ProtoMessage()    {}
func (*SplittedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a5d74133ac2d80, []int{1}
}

func (m *SplittedMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SplittedMessage.Unmarshal(m, b)
}
func (m *SplittedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SplittedMessage.Marshal(b, m, deterministic)
}
func (m *SplittedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplittedMessage.Merge(m, src)
}
func (m *SplittedMessage) XXX_Size() int {
	return xxx_messageInfo_SplittedMessage.Size(m)
}
func (m *SplittedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SplittedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SplittedMessage proto.InternalMessageInfo

func (m *SplittedMessage) GetWordAndPosList() []*WordAndPos {
	if m != nil {
		return m.WordAndPosList
	}
	return nil
}

func (m *SplittedMessage) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *SplittedMessage) GetChatPerson() string {
	if m != nil && m.ChatPerson != nil {
		return *m.ChatPerson
	}
	return ""
}

func (m *SplittedMessage) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type SplittedMessageList struct {
	SplittedMessages     []*SplittedMessage `protobuf:"bytes,1,rep,name=splittedMessages" json:"splittedMessages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SplittedMessageList) Reset()         { *m = SplittedMessageList{} }
func (m *SplittedMessageList) String() string { return proto.CompactTextString(m) }
func (*SplittedMessageList) ProtoMessage()    {}
func (*SplittedMessageList) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a5d74133ac2d80, []int{2}
}

func (m *SplittedMessageList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SplittedMessageList.Unmarshal(m, b)
}
func (m *SplittedMessageList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SplittedMessageList.Marshal(b, m, deterministic)
}
func (m *SplittedMessageList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplittedMessageList.Merge(m, src)
}
func (m *SplittedMessageList) XXX_Size() int {
	return xxx_messageInfo_SplittedMessageList.Size(m)
}
func (m *SplittedMessageList) XXX_DiscardUnknown() {
	xxx_messageInfo_SplittedMessageList.DiscardUnknown(m)
}

var xxx_messageInfo_SplittedMessageList proto.InternalMessageInfo

func (m *SplittedMessageList) GetSplittedMessages() []*SplittedMessage {
	if m != nil {
		return m.SplittedMessages
	}
	return nil
}

func init() {
	proto.RegisterType((*WordAndPos)(nil), "proto_gen.WordAndPos")
	proto.RegisterType((*SplittedMessage)(nil), "proto_gen.SplittedMessage")
	proto.RegisterType((*SplittedMessageList)(nil), "proto_gen.SplittedMessageList")
}

func init() { proto.RegisterFile("SplittedMessage.proto", fileDescriptor_65a5d74133ac2d80) }

var fileDescriptor_65a5d74133ac2d80 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcf, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0x6d, 0x3b, 0x90, 0xbd, 0xc1, 0x1c, 0xd1, 0x61, 0xe8, 0x61, 0x94, 0x9e, 0xea, 0xa5,
	0x87, 0xde, 0x3d, 0x88, 0x30, 0x0f, 0x2a, 0x96, 0x54, 0xf0, 0x24, 0x52, 0xda, 0xb7, 0xb5, 0x60,
	0x9b, 0x9a, 0x04, 0xf7, 0xdf, 0xf8, 0xb7, 0x4a, 0xd2, 0x39, 0x63, 0x64, 0xa7, 0xbc, 0x1f, 0xdf,
	0xf7, 0xbe, 0x9f, 0x24, 0xb0, 0x2c, 0x86, 0xf7, 0x56, 0x29, 0xac, 0x1f, 0x51, 0xca, 0x72, 0x8b,
	0xe9, 0x20, 0xb8, 0xe2, 0x64, 0x6a, 0x8e, 0xb7, 0x2d, 0xf6, 0xe1, 0xc5, 0x6d, 0x53, 0xaa, 0x7d,
	0xf7, 0xb9, 0x1b, 0x46, 0x41, 0x38, 0x7f, 0xe1, 0xa2, 0x5e, 0x0b, 0xfc, 0x18, 0xf3, 0xf8, 0x1e,
	0x40, 0x57, 0x6e, 0xfa, 0x3a, 0xe7, 0x92, 0x10, 0x98, 0xec, 0xb8, 0xa8, 0xa9, 0x17, 0xf9, 0xc9,
	0x94, 0x99, 0x98, 0x5c, 0x41, 0x30, 0x70, 0x49, 0xfd, 0xc8, 0x4f, 0x66, 0xd9, 0x65, 0x7a, 0x30,
	0x48, 0xf3, 0x52, 0xa8, 0xa7, 0x4d, 0x31, 0x20, 0x56, 0x0d, 0xd3, 0x9a, 0xf8, 0xcb, 0x83, 0x33,
	0x87, 0x8b, 0x5c, 0xc3, 0x7c, 0x77, 0x30, 0x78, 0x68, 0xa5, 0xa2, 0x5e, 0x14, 0x24, 0xb3, 0x6c,
	0x69, 0x6d, 0xfa, 0x25, 0x60, 0x8e, 0x58, 0x13, 0xa9, 0xb6, 0x43, 0x63, 0x1f, 0x30, 0x13, 0x93,
	0x15, 0x40, 0xd5, 0x94, 0x2a, 0x47, 0x21, 0x79, 0x4f, 0x03, 0xc3, 0x6a, 0x55, 0x08, 0x85, 0xd3,
	0x6e, 0x74, 0xa7, 0x13, 0xd3, 0xfc, 0x49, 0xe3, 0x57, 0x38, 0x77, 0xf8, 0x8c, 0xc9, 0x1a, 0x16,
	0xf2, 0x6f, 0x59, 0xee, 0x29, 0x43, 0x8b, 0xd2, 0x99, 0x64, 0xff, 0x66, 0xb2, 0x0d, 0x2c, 0xf4,
	0x55, 0x8c, 0xb0, 0x40, 0xf1, 0xd9, 0x56, 0x48, 0x18, 0x90, 0x3b, 0x54, 0xee, 0xab, 0xd8, 0x7b,
	0xad, 0x7f, 0xd2, 0x34, 0xe1, 0xea, 0xb8, 0xa7, 0xee, 0xc7, 0x27, 0xdf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x3c, 0x80, 0x85, 0x2e, 0xfd, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WordSplitServiceClient is the client API for WordSplitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WordSplitServiceClient interface {
	GetSplittedMessage(ctx context.Context, in *ChatMessageList, opts ...grpc.CallOption) (*SplittedMessageList, error)
}

type wordSplitServiceClient struct {
	cc *grpc.ClientConn
}

func NewWordSplitServiceClient(cc *grpc.ClientConn) WordSplitServiceClient {
	return &wordSplitServiceClient{cc}
}

func (c *wordSplitServiceClient) GetSplittedMessage(ctx context.Context, in *ChatMessageList, opts ...grpc.CallOption) (*SplittedMessageList, error) {
	out := new(SplittedMessageList)
	err := c.cc.Invoke(ctx, "/proto_gen.WordSplitService/GetSplittedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WordSplitServiceServer is the server API for WordSplitService service.
type WordSplitServiceServer interface {
	GetSplittedMessage(context.Context, *ChatMessageList) (*SplittedMessageList, error)
}

// UnimplementedWordSplitServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWordSplitServiceServer struct {
}

func (*UnimplementedWordSplitServiceServer) GetSplittedMessage(ctx context.Context, req *ChatMessageList) (*SplittedMessageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSplittedMessage not implemented")
}

func RegisterWordSplitServiceServer(s *grpc.Server, srv WordSplitServiceServer) {
	s.RegisterService(&_WordSplitService_serviceDesc, srv)
}

func _WordSplitService_GetSplittedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessageList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordSplitServiceServer).GetSplittedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_gen.WordSplitService/GetSplittedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordSplitServiceServer).GetSplittedMessage(ctx, req.(*ChatMessageList))
	}
	return interceptor(ctx, in, info, handler)
}

var _WordSplitService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto_gen.WordSplitService",
	HandlerType: (*WordSplitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSplittedMessage",
			Handler:    _WordSplitService_GetSplittedMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "SplittedMessage.proto",
}
